help(pboptions)
library(pbapply)
help(pboptions)
help(system.time)
help(pbsapply)
getwd()
### Determing carbon transformations ###
# KL editing to move to HPC, 25 October 2023
rm(list=ls(all=T))
library(dplyr)
library(tidyr)
options(digits=10) # Sig figs in mass resolution data
Sample_Name = 'DOM_Syn_Trans'
#######################
### Loading in data ###
#######################
dataPath <- "C:/Users/klongnecker/Documents/Dropbox/XX_DOMsynthesis_GreeceMtg/_data_from_2"
scriptsPath <- "C:/Users/klongnecker/Documents/GitHub/DOM_Synthesis"
# if running in pieces, reload the previous output
reload.trans.temp = F
if (reload.trans.temp == T) {
trans.temp = read.csv("DOM_Syn_Trans_Total_Transformations_Temp.csv")
}
reload.files = T
getwd()
ls
ls -l
dir()
help(list.files)
reload.files = T
data = read.csv(list.files(path = dataPath,pattern = "_Data_Trim"), row.names = 1) # Keeping data and mol-data seperate to ensure they are unaltered
data = read.csv(list.files(path = dataPath,pattern = "testing*_Data_Trim"), row.names = 1) # Keeping data and mol-data seperate to ensure they are unaltered
getwd()
list.files(path=dataPath)
list.files(path=dataPath,pattern = "testing*")
list.files(path=dataPath,pattern = "testing*_Data_Trim*")
list.files(path=dataPath,pattern = "testing*_Data_Trim.csv")
list.files(path=dataPath,pattern = "testing_DOM_Synthesis_Data_Trim.csv")
#KL cheating and hard code in file names
data = read.csv(list.files(path = dataPath,pattern = "testing_DOM_Synthesis_Data_Trim.csv"), row.names = 1) # Keeping data and mol-data seperate to ensure they are unaltered
list.files(path = dataPath,pattern = "testing_DOM_Synthesis_Data_Trim.csv")
help("read.csv")
help(list.files)
list.files(path = dataPath,pattern = "testing_DOM_Synthesis_Data_Trim.csv",full.names=TRUE)
#KL cheating and hard code in file names
data = read.csv(list.files(path = dataPath,pattern = "testing_DOM_Synthesis_Data_Trim.csv",full.names=TRUE), row.names = 1) # Keeping data and mol-data seperate to ensure they are unaltered
data2 = read.csv(list.files(path = dataPath,pattern = "testing_*_Data_Trim.csv",full.names=TRUE), row.names = 1) # Keeping data and mol-data seperate to ensure they are unaltered
mol = read.csv(list.files(path=dataPath,pattern = "testing_DOM_Synthesis_Mol_Trim",full.names=TRUE), row.names = 1)
data[1:5,1:5]
mol[1:5,1:5]
dir()
# Loading in transformations
trans.full =  read.csv("Transformation_Database_07-2020.csv")
trans.full$Name = as.character(trans.full$Name)
# Checking row names consistency between molecular info and data
if(identical(x = row.names(data), y = row.names(mol)) == FALSE){
stop("Something is incorrect: the mol. info and peak counts don't match")
}
data = read.csv(list.files(path = dataPath,pattern = "DOM_Synthesis_Data_Trim.csv",full.names=TRUE), row.names = 1) # Keeping data and mol-data seperate to ensure they are unaltered
list.files(path = dataPath,pattern = "DOM_Synthesis_Data_Trim.csv",full.names=TRUE)
list.files(path = dataPath,pattern = "DOM_Synthesis_Data_Trim.csv",full.names=TRUE)
data = read.csv(list.files(path = dataPath,pattern = "DOM_Synthesis_Data_Trim.csv",full.names=TRUE), row.names = 1) # Keeping data and mol-data seperate to ensure they are unaltered
mol = read.csv(list.files(path=dataPath,pattern = "DOM_Synthesis_Mol_Trim",full.names=TRUE), row.names = 1)
#does the data look right...can comment out later on HPC
data[1:5,1:5]
mol[1:5,1:5]
# Checking row names consistency between molecular info and data
if(identical(x = row.names(data), y = row.names(mol)) == FALSE){
stop("Something is incorrect: the mol. info and peak counts don't match")
}
# Checking to ensure ftmsRanalysis was run
if(length(which(mol$C13 == 1)) > 0){
stop("Isotopic signatures weren't removed")
}
# Probably not necessary, but checking for presence/absence
if(max(data) > 1){
print("Data was not presence/absence")
data[data > 0] = 1
}
# Creating output directories
if(!dir.exists("Transformation Peak Comparisons")){
dir.create("Transformation Peak Comparisons")
}
if(!dir.exists("Transformations per Peak")){
dir.create("Transformations per Peak")
}
# pull out just the sample names
samples.to.process = colnames(data)
# error term
error.term = 0.000010
# matrix to hold total number of transformations for each sample
tot.trans = numeric()
counter = 0
counter = counter + 1
print(date())
one.sample.matrix = cbind(as.numeric(as.character(row.names(data))), data[,which(colnames(data) == current.sample), drop = FALSE]) # "drop = FALSE" ensures that the row and column names remain associated with the data
samples.to.process
samples.to.process[1]
current.sample <- samples.to.process[1]
one.sample.matrix = cbind(as.numeric(as.character(row.names(data))), data[,which(colnames(data) == current.sample), drop = FALSE]) # "drop = FALSE" ensures that the row and column names remain associated with the data
colnames(one.sample.matrix) = c("peak", colnames(one.sample.matrix[2]))
Sample_Peak_Mat <- one.sample.matrix %>% gather("sample", "value", -1) %>% filter(value > 0) %>% select(sample, peak)
(nrow(Sample_Peak_Mat >= 2) & nrow(Sample_Peak_Mat) < 5000)
View(samples.to.process)
which(samples.to.process,'Behnke2022_2020February20NegESI_Fen_OiL_0724_i.corems')
samples.to.process[1:5]
current.sample <- 2
current.sample <- samples.to.process[2]
counter = counter + 1
print(date())
one.sample.matrix = cbind(as.numeric(as.character(row.names(data))), data[,which(colnames(data) == current.sample), drop = FALSE]) # "drop = FALSE" ensures that the row and column names remain associated with the data
colnames(one.sample.matrix) = c("peak", colnames(one.sample.matrix[2]))
Sample_Peak_Mat <- one.sample.matrix %>% gather("sample", "value", -1) %>% filter(value > 0) %>% select(sample, peak)
(nrow(Sample_Peak_Mat >= 2) & nrow(Sample_Peak_Mat) < 5000)
#for (current.sample in samples.to.process) {
current.sample <- samples.to.process[idx]
#from James (testing), this sample will work: Behnke2022_2020February20NegESI_Fen_OiL_0724_i.corems
idx <- 2
#for (current.sample in samples.to.process) {
current.sample <- samples.to.process[idx]
counter = counter + 1
print(date())
one.sample.matrix = cbind(as.numeric(as.character(row.names(data))), data[,which(colnames(data) == current.sample), drop = FALSE]) # "drop = FALSE" ensures that the row and column names remain associated with the data
colnames(one.sample.matrix) = c("peak", colnames(one.sample.matrix[2]))
Sample_Peak_Mat <- one.sample.matrix %>% gather("sample", "value", -1) %>% filter(value > 0) %>% select(sample, peak)
(nrow(Sample_Peak_Mat >= 2) & nrow(Sample_Peak_Mat) < 5000)
##
Distance_Results <- Sample_Peak_Mat %>% left_join(Sample_Peak_Mat, by = "sample") %>% filter(peak.x > peak.y) %>% mutate(Dist = peak.x - peak.y) %>% select(sample, Dist,peak.x,peak.y)
Distance_Results$Dist.plus = Distance_Results$Dist + error.term
Distance_Results$Dist.minus = Distance_Results$Dist - error.term
Distance_Results$Trans.name = -999
head(Distance_Results)
dist.unique = unique(Distance_Results[,'sample']) #unique samples
date()
# Finding transformations which match observed mass differences (within error)
op <- pboptions(type = "timer") # default
system.time(mass.diff <- pbsapply(X = trans.full$Mass, function(x) which(Distance_Results$Dist.plus >= x & Distance_Results$Dist.minus <= x), USE.NAMES = T))
rm(op)
trans.full$Mass
help(pbapply)
help("quantile")
mass.diff <- sapply(X = trans.full$Mass, function(x) which(Distance_Results$Dist.plus >= x & Distance_Results$Dist.minus <= x), USE.NAMES = T)
# Setting names of resulting list
names(mass.diff) = trans.full$Name
# Unlisting the new list
mass.diff = data.frame(Trans.name = rep(names(mass.diff), sapply(mass.diff, length)), Position = unlist(mass.diff)) # Transformations that don't match fall out at this step
# Setting the matching transformations
Distance_Results$Trans.name[mass.diff$Position] = as.character(mass.diff$Trans.name)
Distance_Results = Distance_Results[-which(Distance_Results$Trans.name == -999),]
head(Distance_Results)
# Creating directory if it doesn't exist, prior to writing the output file
if(length(grep(Sample_Name,list.dirs("Transformation Peak Comparisons", recursive = F))) == 0){
dir.create(paste("Transformation Peak Comparisons/", Sample_Name, sep=""))
print("Directory created")
}
write.csv(Distance_Results,paste("Transformation Peak Comparisons/",Sample_Name,"/Peak.2.Peak_",dist.unique,".csv",sep=""),quote = F,row.names = F)
# sum up the number of transformations and update the matrix
tot.trans = rbind(tot.trans,c(dist.unique,nrow(Distance_Results),nrow(Sample_Peak_Mat),nrow(Distance_Results)/nrow(Sample_Peak_Mat)))
##### write out current tot.trans in case crash
# format the total transformations matrix and write it out
tot.trans.out = as.data.frame(tot.trans)
colnames(tot.trans.out) = c('sample','total.transformations','num.of.formulas','normalized.trans')
tot.trans.out$sample = as.character(tot.trans.out$sample)
tot.trans.out$total.transformations = as.numeric(as.character(tot.trans.out$total.transformations))
write.csv(tot.trans.out,paste(Sample_Name,"_Total_Transformations_Temp.csv", sep=""),quote = F,row.names = F)
print(dist.unique)
print(date())
print(counter)
# format the total transformations matrix and write it out
tot.trans = as.data.frame(tot.trans)
colnames(tot.trans) = c('sample','total.transformations','num.of.formulas','normalized.trans')
tot.trans$sample = as.character(tot.trans$sample)
tot.trans$total.transformations = as.numeric(as.character(tot.trans$total.transformations))
str(tot.trans)
tot.trans.merged = rbind(tot.trans,trans.temp)
# #KL where does trans.temp come from? only have prior...think about this later
# tot.trans.merged = rbind(tot.trans,trans.temp)
# write.csv(tot.trans.merged,paste(Sample_Name,"_Total_Transformations.csv", sep=""),quote = F,row.names = F)
write.csv(tot.trans,paste(Sample_Name,"_Total_Transformations.csv", sep=""),quote = F,row.names = F)
help(dir.exists)
####
## setup a directory to hold the answers
#HPC
#output=/vortexfs1/home/klongnecker/DOM_SYnthesis/output_dir
#laptop
output_dir <- "C:/Users/klongnecker/Documents/Dropbox/XX_DOMsynthesis_GreeceMtg/data_transformations_output"
dir.exists(path = output_dir,"Transformation Peak Comparisons")
help(filesep)
??filesep
source("~/GitHub/DOM_Synthesis/Transformation_Analysis_by_Sample_sapply_KL.R")
source("~/GitHub/DOM_Synthesis/Transformation_Analysis_by_Sample_sapply_KL.R")
quit()
quit()
